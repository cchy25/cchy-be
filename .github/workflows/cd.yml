name: Deploy

on:
  push:
    branches:
      - main # main 브랜치에 push될 때마다 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 깃허브 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. GHCR 로그인
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .

      # 4.Docker 이미지 푸시
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}

      # 5.EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "--- 배포 시작 ---"
            
            # 최신 Docker 이미지 풀
            IMAGE_URL="ghcr.io/${{ github.repository }}:${{ github.sha }}"
            
            # GHCR 로그인
            echo "${{ secrets.GHCR_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 최신 이미지 가져오기
            sudo docker pull ${IMAGE_URL}
            
            # 기존 컨테이너 중지 및 삭제
            if [ "$(docker ps -q -f name=my-spring-app)" ]; then
                echo "기존 컨테이너 중지 및 삭제..."
                sudo docker stop my-spring-app
                sudo docker rm my-spring-app
            fi
            
            # 기존 이미지 삭제 (선택 사항)
            # sudo docker rmi $(docker images -f "dangling=true" -q)
            
            # 시크릿 환경 변수를 포함하여 새 컨테이너 실행
            sudo docker run -d \
              --name my-spring-app \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e ES_URL="${{ secrets.ES_URL }}" \
              -e JWT_KEY="${{ secrets.JWT_KEY }}" \
              ${IMAGE_URL}
              
            echo "--- 배포 완료 ---"
